pub trait IO {
    fn next_input(&mut self) -> i64;
    fn next_output(&mut self, value: i64);
}

pub struct Computer {
    memory: Vec<i64>,
    pointer: usize,
    relative_base: i64,
}

impl Computer {
    pub fn new() -> Self {
        Computer {
            memory: vec![
                3,
                8,
                1005,
                8,
                304,
                1106,
                0,
                11,
                0,
                0,
                0,
                104,
                1,
                104,
                0,
                3,
                8,
                102,
                -1,
                8,
                10,
                101,
                1,
                10,
                10,
                4,
                10,
                1008,
                8,
                1,
                10,
                4,
                10,
                1002,
                8,
                1,
                29,
                2,
                103,
                1,
                10,
                1,
                106,
                18,
                10,
                3,
                8,
                102,
                -1,
                8,
                10,
                1001,
                10,
                1,
                10,
                4,
                10,
                1008,
                8,
                1,
                10,
                4,
                10,
                102,
                1,
                8,
                59,
                2,
                102,
                3,
                10,
                2,
                1101,
                12,
                10,
                3,
                8,
                102,
                -1,
                8,
                10,
                1001,
                10,
                1,
                10,
                4,
                10,
                108,
                0,
                8,
                10,
                4,
                10,
                101,
                0,
                8,
                88,
                3,
                8,
                102,
                -1,
                8,
                10,
                1001,
                10,
                1,
                10,
                4,
                10,
                108,
                1,
                8,
                10,
                4,
                10,
                101,
                0,
                8,
                110,
                2,
                108,
                9,
                10,
                1006,
                0,
                56,
                3,
                8,
                102,
                -1,
                8,
                10,
                1001,
                10,
                1,
                10,
                4,
                10,
                108,
                0,
                8,
                10,
                4,
                10,
                101,
                0,
                8,
                139,
                1,
                108,
                20,
                10,
                3,
                8,
                102,
                -1,
                8,
                10,
                101,
                1,
                10,
                10,
                4,
                10,
                108,
                0,
                8,
                10,
                4,
                10,
                102,
                1,
                8,
                165,
                1,
                104,
                9,
                10,
                3,
                8,
                102,
                -1,
                8,
                10,
                101,
                1,
                10,
                10,
                4,
                10,
                1008,
                8,
                0,
                10,
                4,
                10,
                1001,
                8,
                0,
                192,
                2,
                9,
                14,
                10,
                2,
                1103,
                5,
                10,
                1,
                1108,
                5,
                10,
                3,
                8,
                1002,
                8,
                -1,
                10,
                101,
                1,
                10,
                10,
                4,
                10,
                1008,
                8,
                1,
                10,
                4,
                10,
                102,
                1,
                8,
                226,
                1006,
                0,
                73,
                1006,
                0,
                20,
                1,
                1106,
                11,
                10,
                1,
                1105,
                7,
                10,
                3,
                8,
                102,
                -1,
                8,
                10,
                1001,
                10,
                1,
                10,
                4,
                10,
                108,
                0,
                8,
                10,
                4,
                10,
                1001,
                8,
                0,
                261,
                3,
                8,
                102,
                -1,
                8,
                10,
                101,
                1,
                10,
                10,
                4,
                10,
                108,
                1,
                8,
                10,
                4,
                10,
                1002,
                8,
                1,
                283,
                101,
                1,
                9,
                9,
                1007,
                9,
                1052,
                10,
                1005,
                10,
                15,
                99,
                109,
                626,
                104,
                0,
                104,
                1,
                21101,
                48062899092,
                0,
                1,
                21101,
                0,
                321,
                0,
                1105,
                1,
                425,
                21101,
                936995300108,
                0,
                1,
                21101,
                0,
                332,
                0,
                1106,
                0,
                425,
                3,
                10,
                104,
                0,
                104,
                1,
                3,
                10,
                104,
                0,
                104,
                0,
                3,
                10,
                104,
                0,
                104,
                1,
                3,
                10,
                104,
                0,
                104,
                1,
                3,
                10,
                104,
                0,
                104,
                0,
                3,
                10,
                104,
                0,
                104,
                1,
                21102,
                209382902951,
                1,
                1,
                21101,
                379,
                0,
                0,
                1106,
                0,
                425,
                21102,
                179544747200,
                1,
                1,
                21102,
                390,
                1,
                0,
                1106,
                0,
                425,
                3,
                10,
                104,
                0,
                104,
                0,
                3,
                10,
                104,
                0,
                104,
                0,
                21102,
                1,
                709488292628,
                1,
                21102,
                1,
                413,
                0,
                1106,
                0,
                425,
                21101,
                0,
                983929868648,
                1,
                21101,
                424,
                0,
                0,
                1105,
                1,
                425,
                99,
                109,
                2,
                22101,
                0,
                -1,
                1,
                21102,
                40,
                1,
                2,
                21102,
                456,
                1,
                3,
                21101,
                446,
                0,
                0,
                1106,
                0,
                489,
                109,
                -2,
                2106,
                0,
                0,
                0,
                1,
                0,
                0,
                1,
                109,
                2,
                3,
                10,
                204,
                -1,
                1001,
                451,
                452,
                467,
                4,
                0,
                1001,
                451,
                1,
                451,
                108,
                4,
                451,
                10,
                1006,
                10,
                483,
                1102,
                0,
                1,
                451,
                109,
                -2,
                2105,
                1,
                0,
                0,
                109,
                4,
                1201,
                -1,
                0,
                488,
                1207,
                -3,
                0,
                10,
                1006,
                10,
                506,
                21102,
                1,
                0,
                -3,
                21202,
                -3,
                1,
                1,
                21201,
                -2,
                0,
                2,
                21101,
                0,
                1,
                3,
                21101,
                525,
                0,
                0,
                1105,
                1,
                530,
                109,
                -4,
                2105,
                1,
                0,
                109,
                5,
                1207,
                -3,
                1,
                10,
                1006,
                10,
                553,
                2207,
                -4,
                -2,
                10,
                1006,
                10,
                553,
                21202,
                -4,
                1,
                -4,
                1105,
                1,
                621,
                21201,
                -4,
                0,
                1,
                21201,
                -3,
                -1,
                2,
                21202,
                -2,
                2,
                3,
                21102,
                1,
                572,
                0,
                1106,
                0,
                530,
                21201,
                1,
                0,
                -4,
                21101,
                0,
                1,
                -1,
                2207,
                -4,
                -2,
                10,
                1006,
                10,
                591,
                21102,
                0,
                1,
                -1,
                22202,
                -2,
                -1,
                -2,
                2107,
                0,
                -3,
                10,
                1006,
                10,
                613,
                22101,
                0,
                -1,
                1,
                21101,
                0,
                613,
                0,
                106,
                0,
                488,
                21202,
                -2,
                -1,
                -2,
                22201,
                -4,
                -2,
                -4,
                109,
                -5,
                2106,
                0,
                0,
            ],
            pointer: 0,
            relative_base: 0,
        }
    }

    fn expand_memory(&mut self, index: usize) {
        if index > self.memory.len() - 1 {
            self.memory.resize(index + 1, 0);
        }
    }

    fn read_parameters(&mut self, count: usize, instruction: i64) -> Vec<i64> {
        let mut params = Vec::new();
        let mut modes = instruction / 100;

        for i in 0..count {
            let mode = modes % 10;
            match mode {
                0 => {
                    let read_pos = self.memory[self.pointer + 1 + i];
                    self.expand_memory(read_pos as usize);
                    params.push(self.memory[read_pos as usize]);
                }
                1 => {
                    params.push(self.memory[self.pointer + 1 + i]);
                }
                2 => {
                    let offset = self.memory[self.pointer + 1 + i];
                    let read_pos = self.relative_base + offset;
                    self.expand_memory(read_pos as usize);
                    params.push(self.memory[read_pos as usize]);
                }
                _ => panic!("Unexpected mode: {}", mode),
            }
            modes /= 10;
        }

        params
    }

    fn write_parameter(&mut self, index: usize, instruction: i64) -> i64 {
        let mode = (instruction / (100 * i64::pow(10, index as u32))) % 10;
        match mode {
            0 => {
                let pos = self.memory[self.pointer + 1 + index];
                self.expand_memory(pos as usize);
                pos
            }
            2 => {
                let pos = self.relative_base + self.memory[self.pointer + 1 + index];
                self.expand_memory(pos as usize);
                pos
            }
            _ => panic!("Unexpected mode: {}", mode),
        }
    }

    pub fn run(mut self, io: &mut impl IO) {
        loop {
            let instruction = self.memory[self.pointer];
            match instruction % 100 {
                1 => {
                    let params = self.read_parameters(2, instruction);
                    let write_pos = self.write_parameter(2, instruction) as usize;
                    self.memory[write_pos] = params[0] + params[1];
                    self.pointer += 4;
                }
                2 => {
                    let params = self.read_parameters(3, instruction);
                    let write_pos = self.write_parameter(2, instruction) as usize;
                    self.memory[write_pos] = params[0] * params[1];
                    self.pointer += 4;
                }
                3 => {
                    let write_pos = self.write_parameter(0, instruction) as usize;
                    self.memory[write_pos] = io.next_input();
                    self.pointer += 2;
                }
                4 => {
                    let params = self.read_parameters(1, instruction);
                    io.next_output(params[0]);
                    self.pointer += 2;
                }
                5 => {
                    let params = self.read_parameters(2, instruction);
                    if params[0] != 0 {
                        self.pointer = params[1] as usize;
                    } else {
                        self.pointer += 3;
                    }
                }
                6 => {
                    let params = self.read_parameters(2, instruction);
                    if params[0] == 0 {
                        self.pointer = params[1] as usize;
                    } else {
                        self.pointer += 3;
                    }
                }
                7 => {
                    let params = self.read_parameters(2, instruction);
                    let write_pos = self.write_parameter(2, instruction) as usize;
                    self.memory[write_pos] = if params[0] < params[1] { 1 } else { 0 };
                    self.pointer += 4;
                }
                8 => {
                    let params = self.read_parameters(2, instruction);
                    let write_pos = self.write_parameter(2, instruction) as usize;
                    self.memory[write_pos] = if params[0] == params[1] { 1 } else { 0 };
                    self.pointer += 4;
                }
                9 => {
                    let params = self.read_parameters(1, instruction);
                    self.relative_base += params[0];
                    self.pointer += 2;
                }
                99 => break,
                _ => panic!("Unexpected instruction: {}", instruction),
            }
        }
    }
}
